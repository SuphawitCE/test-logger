{"version":3,"file":"envalid.cjs.development.js","sources":["../src/errors.ts","../src/reporter.ts","../src/core.ts","../src/middleware.ts","../src/envalid.ts","../src/validators.ts"],"sourcesContent":["// Surprisingly involved error subclassing\n// See https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n\nexport class EnvError extends TypeError {\n  constructor(message?: string) {\n    super(message)\n    Object.setPrototypeOf(this, new.target.prototype)\n    Error.captureStackTrace(this, EnvError)\n    this.name = this.constructor.name\n  }\n}\n\nexport class EnvMissingError extends ReferenceError {\n  constructor(message?: string) {\n    super(message)\n    Object.setPrototypeOf(this, new.target.prototype)\n    Error.captureStackTrace(this, EnvMissingError)\n    this.name = this.constructor.name\n  }\n}\n","/* eslint-disable no-console */\nimport { EnvMissingError } from './errors'\nimport { ReporterOptions } from './types'\n\n// The default reporter is supports a second argument, for consumers\n// who want to use it with only small customizations\ntype ExtraOptions<T> = {\n  onError?: (errors: Partial<Record<keyof T, Error>>) => void\n  logger: (output: string) => void\n}\n\nconst defaultLogger = console.error.bind(console)\n\n// Apply ANSI colors to the reporter output only if we detect that we're running in Node\nconst isNode = !!(typeof process === 'object' && process?.versions?.node)\nconst colorWith = (colorCode: string) => (str: string) =>\n  isNode ? `\\x1b[${colorCode}m${str}\\x1b[0m` : str\n\nconst colors = {\n  blue: colorWith('34'),\n  white: colorWith('37'),\n  yellow: colorWith('33'),\n}\n\nconst RULE = colors.white('================================')\n\nexport const defaultReporter = <T = any>(\n  { errors = {} }: ReporterOptions<T>,\n  { onError, logger }: ExtraOptions<T> = { logger: defaultLogger },\n) => {\n  if (!Object.keys(errors).length) return\n\n  const missingVarsOutput: string[] = []\n  const invalidVarsOutput: string[] = []\n  for (const [k, err] of Object.entries(errors)) {\n    if (err instanceof EnvMissingError) {\n      missingVarsOutput.push(`    ${colors.blue(k)}: ${err.message || '(required)'}`)\n    } else\n      invalidVarsOutput.push(\n        `    ${colors.blue(k)}: ${(err as Error)?.message || '(invalid format)'}`,\n      )\n  }\n\n  // Prepend \"header\" output for each section of the output:\n  if (invalidVarsOutput.length) {\n    invalidVarsOutput.unshift(` ${colors.yellow('Invalid')} environment variables:`)\n  }\n  if (missingVarsOutput.length) {\n    missingVarsOutput.unshift(` ${colors.yellow('Missing')} environment variables:`)\n  }\n\n  const output = [\n    RULE,\n    invalidVarsOutput.sort().join('\\n'),\n    missingVarsOutput.sort().join('\\n'),\n    colors.yellow('\\n Exiting with error code 1'),\n    RULE,\n  ]\n    .filter(x => !!x)\n    .join('\\n')\n\n  logger(output)\n\n  if (onError) {\n    onError(errors)\n  } else if (isNode) {\n    process.exit(1)\n  } else {\n    throw new TypeError('Environment validation failed')\n  }\n}\n","import { EnvError, EnvMissingError } from './errors'\nimport { CleanOptions, Spec, ValidatorSpec } from './types'\nimport { defaultReporter } from './reporter'\n\nexport const testOnlySymbol = Symbol('envalid - test only')\n\n/**\n * Validate a single env var, given a spec object\n *\n * @throws EnvError - If validation is unsuccessful\n * @return - The cleaned value\n */\nfunction validateVar<T>({\n  spec,\n  name,\n  rawValue,\n}: {\n  name: string\n  rawValue: string | T\n  spec: Spec<T> & { _parse: (input: string) => T }\n}) {\n  if (typeof spec._parse !== 'function') {\n    throw new EnvError(`Invalid spec for \"${name}\"`)\n  }\n  const value = spec._parse(rawValue as string)\n\n  if (spec.choices) {\n    if (!Array.isArray(spec.choices)) {\n      throw new TypeError(`\"choices\" must be an array (in spec for \"${name}\")`)\n    } else if (!spec.choices.includes(value)) {\n      throw new EnvError(`Value \"${value}\" not in choices [${spec.choices}]`)\n    }\n  }\n  if (value == null) throw new EnvError(`Invalid value for env var \"${name}\"`)\n  return value\n}\n\n// Format a string error message for when a required env var is missing\nfunction formatSpecDescription<T>(spec: Spec<T>) {\n  const egText = spec.example ? ` (eg. \"${spec.example}\")` : ''\n  const docsText = spec.docs ? `. See ${spec.docs}` : ''\n  return `${spec.desc}${egText}${docsText}`\n}\n\nconst readRawEnvValue = <T>(env: unknown, k: keyof T | 'NODE_ENV'): string | T[keyof T] => {\n  return (env as any)[k]\n}\n\nconst isTestOnlySymbol = (value: any): value is symbol => value === testOnlySymbol\n\n/**\n * Perform the central validation/sanitization logic on the full environment object\n */\nexport function getSanitizedEnv<T>(\n  environment: unknown,\n  specs: { [K in keyof T]: ValidatorSpec<T[K]> },\n  options: CleanOptions<T> = {},\n): T {\n  let cleanedEnv = {} as T\n  const errors: Partial<Record<keyof T, Error>> = {}\n  const varKeys = Object.keys(specs) as Array<keyof T>\n  const rawNodeEnv = readRawEnvValue(environment, 'NODE_ENV')\n\n  for (const k of varKeys) {\n    const spec = specs[k]\n\n    // Use devDefault values only if NODE_ENV was explicitly set, and isn't 'production'\n    const usingDevDefault =\n      rawNodeEnv && rawNodeEnv !== 'production' && spec.hasOwnProperty('devDefault')\n    const devDefaultValue = usingDevDefault ? spec.devDefault : undefined\n    const rawValue =\n      readRawEnvValue(environment, k) ??\n      (devDefaultValue === undefined ? spec.default : devDefaultValue)\n\n    // Default values can be anything falsy (including an explicitly set undefined), without\n    // triggering validation errors:\n    const usingFalsyDefault =\n      (spec.hasOwnProperty('default') && spec.default === rawValue) ||\n      (usingDevDefault && devDefaultValue === rawValue)\n\n    try {\n      if (isTestOnlySymbol(rawValue)) {\n        throw new EnvMissingError(formatSpecDescription(spec))\n      }\n\n      if (rawValue === undefined) {\n        if (!usingFalsyDefault) {\n          throw new EnvMissingError(formatSpecDescription(spec))\n        }\n      } else {\n        cleanedEnv[k] = validateVar({ name: k as string, spec, rawValue })\n      }\n    } catch (err) {\n      if (options?.reporter === null) throw err\n      errors[k] = err\n    }\n  }\n\n  const reporter = options?.reporter || defaultReporter\n  reporter({ errors, env: cleanedEnv })\n  return cleanedEnv\n}\n","import { CleanedEnvAccessors } from './types'\n\nexport const strictProxyMiddleware = <T extends object>(envObj: T, rawEnv: unknown) => {\n  const inspectables = [\n    'length',\n    'inspect',\n    'hasOwnProperty',\n    Symbol.toStringTag,\n    Symbol.iterator,\n\n    // For jest\n    'asymmetricMatch',\n    'nodeType',\n\n    // For libs that use `then` checks to see if objects are Promises (see #74):\n    'then',\n    // For usage with TypeScript esModuleInterop flag\n    '__esModule',\n  ]\n  const inspectSymbolStrings = ['Symbol(util.inspect.custom)', 'Symbol(nodejs.util.inspect.custom)']\n\n  return new Proxy(envObj, {\n    get(target, name: string) {\n      // These checks are needed because calling console.log on a\n      // proxy that throws crashes the entire process. This permits access on\n      // the necessary properties for `console.log(envObj)`, `envObj.length`,\n      // `envObj.hasOwnProperty('string')` to work.\n      if (inspectables.includes(name) || inspectSymbolStrings.includes(name.toString())) {\n        // @ts-expect-error TS doesn't like symbol types as indexers\n        return target[name]\n      }\n\n      const varExists = target.hasOwnProperty(name)\n      if (!varExists) {\n        if (typeof rawEnv === 'object' && rawEnv?.hasOwnProperty?.(name)) {\n          throw new ReferenceError(\n            `[envalid] Env var ${name} was accessed but not validated. This var is set in the environment; please add an envalid validator for it.`,\n          )\n        }\n\n        throw new ReferenceError(`[envalid] Env var not found: ${name}`)\n      }\n\n      return target[name as keyof T]\n    },\n\n    set(_target, name: string) {\n      throw new TypeError(`[envalid] Attempt to mutate environment value: ${name}`)\n    },\n  })\n}\n\nexport const accessorMiddleware = <T>(envObj: T, rawEnv: unknown) => {\n  // Attach is{Prod/Dev/Test} properties for more readable NODE_ENV checks\n  // Note that isDev and isProd are just aliases to isDevelopment and isProduction\n\n  // @ts-ignore attempt to read NODE_ENV even if it's not in the spec\n  const computedNodeEnv = envObj.NODE_ENV || rawEnv.NODE_ENV\n\n  // If NODE_ENV is not set, assume production\n  const isProd = !computedNodeEnv || computedNodeEnv === 'production'\n\n  Object.defineProperties(envObj, {\n    isDevelopment: { value: computedNodeEnv === 'development' },\n    isDev: { value: computedNodeEnv === 'development' },\n    isProduction: { value: isProd },\n    isProd: { value: isProd },\n    isTest: { value: computedNodeEnv === 'test' },\n  })\n  return envObj as T & CleanedEnvAccessors\n}\n\nexport const applyDefaultMiddleware = <T>(cleanedEnv: T, rawEnv: unknown) => {\n  // Note: Ideally we would declare the default middlewares in an array and apply them in series with\n  // a generic pipe() function. However, a generically typed variadic pipe() appears to not be possible\n  // in TypeScript as of 4.x, so we just manually apply them below. See\n  // https://github.com/microsoft/TypeScript/pull/39094#issuecomment-647042984\n  return strictProxyMiddleware(accessorMiddleware(cleanedEnv, rawEnv), rawEnv)\n}\n","import { CleanedEnvAccessors, CleanOptions, ValidatorSpec } from './types'\nimport { getSanitizedEnv, testOnlySymbol } from './core'\nimport { applyDefaultMiddleware } from './middleware'\n\n/**\n * Returns a sanitized, immutable environment object. _Only_ the env vars\n * specified in the `validators` parameter will be accessible on the returned\n * object.\n * @param environment An object containing your env vars (eg. process.env).\n * @param specs An object that specifies the format of required vars.\n * @param options An object that specifies options for cleanEnv.\n */\nexport function cleanEnv<T>(\n  environment: unknown,\n  specs: { [K in keyof T]: ValidatorSpec<T[K]> },\n  options: CleanOptions<T> = {},\n): Readonly<T & CleanedEnvAccessors> {\n  const cleaned = getSanitizedEnv(environment, specs, options)\n  return Object.freeze(applyDefaultMiddleware(cleaned, environment))\n}\n\n/**\n * Returns a sanitized, immutable environment object, and passes it through a custom\n * applyMiddleware function before being frozen. Most users won't need the flexibility of custom\n * middleware; prefer cleanEnv() unless you're sure you need it\n *\n * @param environment An object containing your env vars (eg. process.env).\n * @param specs An object that specifies the format of required vars.\n * @param applyMiddleware A function that applies transformations to the cleaned env object\n * @param options An object that specifies options for cleanEnv.\n */\nexport function customCleanEnv<T, MW>(\n  environment: unknown,\n  specs: { [K in keyof T]: ValidatorSpec<T[K]> },\n  applyMiddleware: (cleaned: T, rawEnv: unknown) => MW,\n  options: CleanOptions<T> = {},\n): Readonly<MW> {\n  const cleaned = getSanitizedEnv(environment, specs, options)\n  return Object.freeze(applyMiddleware(cleaned, environment))\n}\n\n/**\n * Utility function for providing default values only when NODE_ENV=test\n *\n * For more context, see https://github.com/af/envalid/issues/32\n */\nexport const testOnly = <T>(defaultValueForTests: T) => {\n  return process.env.NODE_ENV === 'test' ? defaultValueForTests : ((testOnlySymbol as unknown) as T) // T is not strictly correct, but prevents type errors during usage\n}\n","import { Spec, ValidatorSpec } from './types'\nimport { EnvError } from './errors'\n\n// Simplified adaptation of https://github.com/validatorjs/validator.js/blob/master/src/lib/isFQDN.js\nconst isFQDN = (input: string) => {\n  if (!input.length) return false\n  const parts = input.split('.')\n  for (let part, i = 0; i < parts.length; i++) {\n    part = parts[i]\n    if (!/^[a-z\\u00a1-\\uffff0-9-]+$/i.test(part)) return false\n    if (/[\\uff01-\\uff5e]/.test(part)) return false // disallow full-width chars\n    if (part[0] === '-' || part[part.length - 1] === '-') return false\n  }\n  return true\n}\n\n// \"best effort\" regex-based IP address check\n// If you want a more exhaustive check, create your own custom validator, perhaps wrapping this\n// implementation (the source of the ipv4 regex below): https://github.com/validatorjs/validator.js/blob/master/src/lib/isIP.js\nconst ipv4Regex = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/\nconst ipv6Regex = /([a-f0-9]+:+)+[a-f0-9]+/\nconst isIP = (input: string) => {\n  if (!input.length) return false\n  return ipv4Regex.test(input) || ipv6Regex.test(input)\n}\n\nconst EMAIL_REGEX = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/ // intentionally non-exhaustive\n\nexport const makeValidator = <T>(parseFn: (input: string) => T) => {\n  return function(spec?: Spec<T>): ValidatorSpec<T> {\n    return { ...spec, _parse: parseFn }\n  }\n}\n\n// The reason for the function wrapper is to enable the <T extends boolean = boolean> type parameter\n// that enables better type inference. For more context, check out the following PR:\n// https://github.com/af/envalid/pull/118\nexport function bool<T extends boolean = boolean>(spec?: Spec<T>) {\n  return makeValidator((input: string | boolean) => {\n    switch (input) {\n      case true:\n      case 'true':\n      case 't':\n      case '1':\n        return true\n      case false:\n      case 'false':\n      case 'f':\n      case '0':\n        return false\n      default:\n        throw new EnvError(`Invalid bool input: \"${input}\"`)\n    }\n  })(spec)\n}\n\nexport function num<T extends number = number>(spec?: Spec<T>) {\n  return makeValidator((input: string) => {\n    const coerced = +input\n    if (Number.isNaN(coerced)) throw new EnvError(`Invalid number input: \"${input}\"`)\n    return coerced\n  })(spec)\n}\n\nexport function str<T extends string = string>(spec?: Spec<T>) {\n  return makeValidator((input: string) => {\n    if (typeof input === 'string') return input\n    throw new EnvError(`Not a string: \"${input}\"`)\n  })(spec)\n}\n\nexport function email<T extends string = string>(spec?: Spec<T>) {\n  return makeValidator((x: string) => {\n    if (EMAIL_REGEX.test(x)) return x\n    throw new EnvError(`Invalid email address: \"${x}\"`)\n  })(spec)\n}\n\nexport function host<T extends string = string>(spec?: Spec<T>) {\n  return makeValidator((input: string) => {\n    if (!isFQDN(input) && !isIP(input)) {\n      throw new EnvError(`Invalid host (domain or ip): \"${input}\"`)\n    }\n    return input\n  })(spec)\n}\n\nexport function port<T extends number = number>(spec?: Spec<T>) {\n  return makeValidator((input: string) => {\n    const coerced = +input\n    if (\n      Number.isNaN(coerced) ||\n      `${coerced}` !== `${input}` ||\n      coerced % 1 !== 0 ||\n      coerced < 1 ||\n      coerced > 65535\n    ) {\n      throw new EnvError(`Invalid port input: \"${input}\"`)\n    }\n    return coerced\n  })(spec)\n}\n\nexport function url<T extends string = string>(spec?: Spec<T>) {\n  return makeValidator((x: string) => {\n    try {\n      new URL(x)\n      return x\n    } catch (e) {\n      throw new EnvError(`Invalid url: \"${x}\"`)\n    }\n  })(spec)\n}\n\n// It's recommended that you provide an explicit type parameter for json validation\n// if you're using TypeScript. Otherwise the output will be typed as `any`. For example:\n//\n// cleanEnv({\n//   MY_VAR: json<{ foo: number }>({ default: { foo: 123 } }),\n// })\nexport function json<T = any>(spec?: Spec<T>) {\n  return makeValidator<T>((x: string) => {\n    try {\n      return JSON.parse(x)\n    } catch (e) {\n      throw new EnvError(`Invalid json: \"${x}\"`)\n    }\n  })(spec)\n}\n"],"names":["EnvError","message","Object","setPrototypeOf","prototype","Error","captureStackTrace","name","constructor","TypeError","EnvMissingError","ReferenceError","defaultLogger","console","error","bind","isNode","process","versions","node","colorWith","colorCode","str","colors","blue","white","yellow","RULE","defaultReporter","errors","logger","onError","keys","length","missingVarsOutput","invalidVarsOutput","entries","k","err","push","unshift","output","sort","join","filter","x","exit","testOnlySymbol","Symbol","validateVar","spec","rawValue","_parse","value","choices","Array","isArray","includes","formatSpecDescription","egText","example","docsText","docs","desc","readRawEnvValue","env","isTestOnlySymbol","getSanitizedEnv","environment","specs","options","cleanedEnv","varKeys","rawNodeEnv","usingDevDefault","hasOwnProperty","devDefaultValue","devDefault","undefined","usingFalsyDefault","reporter","strictProxyMiddleware","envObj","rawEnv","inspectables","toStringTag","iterator","inspectSymbolStrings","Proxy","get","target","toString","varExists","set","_target","accessorMiddleware","computedNodeEnv","NODE_ENV","isProd","defineProperties","isDevelopment","isDev","isProduction","isTest","applyDefaultMiddleware","cleanEnv","cleaned","freeze","customCleanEnv","applyMiddleware","testOnly","defaultValueForTests","isFQDN","input","parts","split","part","i","test","ipv4Regex","ipv6Regex","isIP","EMAIL_REGEX","makeValidator","parseFn","bool","num","coerced","Number","isNaN","email","host","port","url","URL","e","json","JSON","parse"],"mappings":"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"}