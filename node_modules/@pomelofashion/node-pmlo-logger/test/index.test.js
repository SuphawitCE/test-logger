const mockPino = jest.fn();

jest.mock('pino', () => mockPino);

const mockCleanEnv = jest.fn(() => ({
  LOG_LEVEL: 'warn'
}));

jest.mock('envalid', () => ({
  cleanEnv: mockCleanEnv,
  str: (obj) => obj
}));

const loggerClient = require('../src');

const defaultKeys = [
  'email',
  '*.email',
  'username',
  '*.username',
  'password',
  '*.password',
  'token',
  '*.token',
  'key',
  '*.key',
  'accessToken',
  '*.accessToken',
  '*.authorization',
  'options.headers.authorization',
  'options.headers["x-shopify-access-token"]',
  'given_name',
  '*.given_name',
  'family_name',
  '*.family_name',
  'phone_number',
  '*.phone_number',
  '["cognito:email_alias"]',
  '*["cognito:email_alias"]',
  '["cognito:phone_number_alias"]',
  '*["cognito:phone_number_alias"]',
  'idToken',
  '*.idToken',
  'refreshToken',
  '*.refreshToken',
  '["custom:firebase_uid"]',
  '*["custom:firebase_uid"]',
  'uid',
  '*.uid',
  'phoneNumber',
  '*.phoneNumber',
  'requestId',
  '*.requestId'
];

test('envalid is called correctly', async () => {
  expect(mockCleanEnv).toBeCalledWith(process.env, {
    LOG_LEVEL: { default: 'warn' }
  });
});

describe('Logger module test cases', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('createLogger should use level if one is provided', async () => {
    loggerClient.createLogger({
      level: 'debug'
    });

    expect(mockPino).toHaveBeenCalledWith(
      expect.objectContaining({
        level: 'debug'
      })
    );
  });

  test('createLogger should use mixin if one is provided', async () => {
    loggerClient.createLogger({
      mixin: 'some function'
    });

    expect(mockPino).toHaveBeenCalledWith(
      expect.objectContaining({
        mixin: 'some function'
      })
    );
  });

  test('createLogger should use default values', async () => {
    loggerClient.createLogger({
      awsRequestId: '12345'
    });

    expect(mockPino).toHaveBeenCalledWith(
      expect.objectContaining({
        level: 'warn'
      })
    );

    expect(mockPino.mock.calls[0][0].mixin()).toMatchObject({
      awsRequestId: '12345'
    });
  });

  test('createLogger should use empty object by default with default level from envalid', async () => {
    loggerClient.createLogger();

    expect(mockPino).toHaveBeenCalledWith(
      expect.objectContaining({
        level: 'warn'
      })
    );

    expect(mockPino.mock.calls[0][0].mixin()).toMatchObject({
      awsRequestId: undefined
    });
  });

  test('createLogger should use default redact keys if empty values passed from lambdas', async () => {
    loggerClient.createLogger();

    expect(mockPino).toHaveBeenCalledWith(
      expect.objectContaining({
        redact: {
          paths: defaultKeys,
          censor: '**Redacted**'
        }
      })
    );
  });

  test('createLogger should use default redact keys and passed values from lambdas', async () => {
    loggerClient.createLogger({ redactKeys: ['auth-key', 'auth-token'] });

    expect(mockPino).toHaveBeenCalledWith(
      expect.objectContaining({
        redact: {
          paths: defaultKeys.concat(['auth-key', 'auth-token']),
          censor: '**Redacted**'
        }
      })
    );
  });
});
